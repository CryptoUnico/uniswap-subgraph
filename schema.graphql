# NOTE  - all USD values are calculated at the moment an event updates, and the conversion of ETH/USD at that time
#         As opposed to calculating USD at each moment, and running a tally of USD each time an event is triggered

# Uniswap entity stores values from the Factory contract
type Uniswap @entity {
    id: ID! # Factory Address
    exchangeCount: Int!
    exchanges: [Exchange!]! @derivedFrom(field: "factoryID")

    # TODO - math for these 7 values
    totalVolume: BigDecimal
    totalDepositedLiquidity: BigDecimal
    totalRemovedLiquidity: BigDecimal

    totalVolumeUSD: BigDecimal                                  # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate for USD
    totalDepositedLiquidityUSD: BigDecimal
    totalRemovedLiquidityUSD: BigDecimal

    totalSells: BigInt                                          # Total events where tokens have been sold
    totalBuys: BigInt                                           # Total events where tokens have been bought
    totalAddLiquidity: BigInt                                   # Total events where liqidity has been added
    totalRemoveLiquidity: BigInt                                # Total events where liquidity have been removed
}

type Exchange @entity {
    id: ID!                                 # Uniswap Exchange address
    tokenAddress: Bytes!                    # Token address
    tokenSymbol: String                     # TODO - make sure we handle these null nicely
    tokenName: String                       # TODO - make sure we handle these null nicely
    tokenDecimals: Int                      # TODO - make sure we handle these null nicely
    fee: BigDecimal!                        # Always 0.3% for v1 uniswap
    version: Int!                           # V1 only right now
    startTime: Int!                         # time exchange was created
    endTime: Int                            # Time exchange is closed (such as an upgrade to uniswap contacts)

    ethLiquidity: BigDecimal!               # In Eth, i.e. incorporates 10^-18 to get rid of pricing in wei
    tokenLiquidity: BigDecimal!             # must factor in the decimals of tokens, which can be various
    ethBalance: BigDecimal!
    tokenBalance: BigDecimal!
    combinedBalanceInEth: BigDecimal!       # Equal to ethBalance + (tokenBalance/price). Stored to simplify users calculating their own personal return. because the ratio may have changes a lot in one direction
    combinedBalanceInUSD: BigDecimal!       # Equal to combinedBalanceInUSD * DAI/ETH
    ROI: BigDecimal!                        # ROI for the exchange liquidity providers as a whole
    totalUniToken: BigDecimal!              # Count of the unilying unitokens that represent ownership

    # Counting Events
    addLiquidityCount: BigInt!              # count the number of times liquidity has been added
    removeLiquidityCount: BigInt!           # count the number of times liquidity has been removed
    sellTokenCount: BigInt!                 # count the number of times the tokens been sold
    buyTokenCount: BigInt!                  # count the number of times the tokens been bought

    # Price values using eth
    lastPrice: BigDecimal!                  # the last trade price
    price: BigDecimal!                      # price is the total amount of tokens that equal one ETH
    tradeVolume: BigDecimal!                # total tokens traded EVER
    totalValue: BigDecimal!                 # totalValue is accumulation of trade price X trade volume. TV = tokensSold * priceTokensSold
    weightedAvgPrice: BigDecimal!           # avg price of all trades since inception. WAP = totalValue / totalVolume

    # Price values uing usd TODO - get values from MKR usd oracle when functionality is possible. (IT MIGHT BE POSSIBLE NOW. SEE CHANGETYPE AND BIGINT
    lastPriceUSD: BigDecimal!               # the last trade price
    priceUSD: BigDecimal!                   # USD / token
    weightedAvgPriceUSD: BigDecimal!         # avg price of all trades since inception. WAP = totalValue / totalVolume. Based on WAP of Ether and ether/usd at the time of calculation

    # Fields used to help derived relationship
    factoryID: String!                                                              # used for @derivedFrom of Factory
    tokenHolders: [UserExchangeData!]! @derivedFrom(field: "exchangeAddress")       # Relationship to show all token holders on the exchange
    txs: [Transaction!]! @derivedFrom(field: "exchangeAddress")                     # Relationship to show all txs on the exchange
}

type User @entity {
    id: ID! # user eth adddress
    exchangeBalances: [UserExchangeData!]!  @derivedFrom(field: "userAddress")
    txs: [Transaction!]!  @derivedFrom(field: "userAddress")
}

# Left out allowance for now, because handleApprove never gets called
type UserExchangeData @entity {
    id: ID!                     # ID is concatenation of token and user addr. i.e. 0xahiow4-0xkashkd34.... #todo - change to 2 address concatenation
    userAddress: Bytes!         # used for @derivedFrom of User
    exchangeAddress: Bytes!        # used for @derivedFrom of TrackedExchange

    # Liquidity Provider Data
    ethDeposited: BigDecimal!                   # where negative means eth was exchanged for tokens
    tokensDeposited: BigDecimal!                # where negative means tokens were exchanged for eth
    ethWithdrawn: BigDecimal!
    tokensWithdrawn: BigDecimal!
    depositedUSDCombined: BigDecimal!           # eth + tokens combined and converted into USD
    withdrawnUSDCombined: BigDecimal!           # eth + tokens combined and converted into USD
    uniTokensMinted: BigDecimal!
    uniTokensBurned: BigDecimal!

    # Trading Data
    # Note - Fee is always charged in what the user is paying with. i.e. you buy eth by paying in token. Fee is in tokenn
    ethBought: BigDecimal!
    ethSold: BigDecimal!
    tokensBought: BigDecimal!
    tokensSold: BigDecimal!
    ethFeesPaid: BigDecimal!
    tokenFeesPaid: BigDecimal!
    ethFeesInUSD: BigDecimal!
    tokenFeesInUSD: BigDecimal!
}

type Transaction @entity {
    id: ID!             # Transaction Hash
    event: String!
    block: Int!
    timeStamp: Int!
    exchangeAddress: Bytes!
    tokenAddress: Bytes!
    tokenSymbol: String
    userAddress: Bytes!
    ethAmount: BigInt!   # Trade Event: negative means sold eth. Liquidity Event: Negative = removed. Positive = added
    tokenAmount: BigInt! # Trade Event: negative means sold eth. Liquidity Event: Negative = removed. Positive = added
    fee: BigDecimal!
}